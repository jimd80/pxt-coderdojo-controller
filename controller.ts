// Makecode extension for the CoderDojo Controller. A low cost DIY game controller for micro:bit
// According to naming conventions: Enums can be left in the global namespace with a proper prefix in the name to keep them unique.
// While it seems better to put them inside the namespace, the generator of enums.d.ts doesn't support it anyway, so keep all enums outside the namespace and prefix them with CoderDojo

enum CoderDojoButtonID {
    //% block="ðŸ¡…"
    Up = DAL.MICROBIT_ID_IO_P15,
    //% block="ðŸ¡‡"
    Down = DAL.MICROBIT_ID_IO_P16,
    //% block="ðŸ¡„"
    Left = DAL.MICROBIT_ID_IO_P13,
    //% block="ðŸ¡†"
    Right = DAL.MICROBIT_ID_IO_P14,
    //% block="X"
    X = DAL.MICROBIT_ID_IO_P8,
    //% block="Y"
    Y = DAL.MICROBIT_ID_IO_P2,
    //% block="A"
    A = DAL.MICROBIT_ID_BUTTON_A,
    //% block="B"
    B = DAL.MICROBIT_ID_BUTTON_B
}

enum CoderDojoButtonEvent {
    //% block="pressed"
    Pressed = DAL.MICROBIT_BUTTON_EVT_DOWN,
    //% block="released"
    Released = DAL.MICROBIT_BUTTON_EVT_UP
}

enum CoderDojoLed {
    //% block="red"
    Red
}

enum CoderDojoLedState {
    //% block="off"
    Off = 0,
    //% block="on"
    On = 1
}

/**
 * Blocks for using the CoderDojo Game Controller
 */
//% weight=100 color=#000000 icon="\uf11b" block="Dojo Controller"
namespace CoderDojo_Controller {

    // private function, not autogenerated in shims.d.ts for some reason so decare it here
    //% shim=CoderDojo_Controller::init
    function init(): void { return; }

    /**
     * Run code when a button on the controller is pressed or released. Buttons A and B on the controller are the same as buttons A and B on the Micro:bit
     * @param button the button to query, eg: CoderDojoButton.Left
     * @param event run code when the button is either pressed or released, eg: CoderDojoButtonEvent.Pressed
     */
    //% block="on button %button %event"
    //% blockId="coderdojo_controller_button_press_on_event"
    //% weight=95 blockGap=8
    export function onButtonPress(button: CoderDojoButtonID, event: CoderDojoButtonEvent, handler: Action) {
        control.onEvent(<number>button, <number>event, handler);
    }

    /**
     * Turn a LED on the controller on or off.
     * @param led which LED, there is currentely only 1 controllable LED on the controller which is CoderDojoLed.Red
     * @param state turn the LED either on or off, eg: CoderDojoLedState.On
     */
    //% block="turn %led LED %state" icon="\uf080"
    //% blockId="coderdojo_controller_set_led"
    //% weight=80 blockGap=8
    export function setLed(led: CoderDojoLed, state: CoderDojoLedState): void {
        pins.digitalWritePin(DigitalPin.P1, <number>state); // only 1 LED so don't test which led
    }

    // pull directions are set when creating MicroBitButton() instances in init()
    // pins.setPull(DigitalPin.P2, PinPullMode.PullUp);
    // pins.setPull(DigitalPin.P8, PinPullMode.PullUp);
    // pins.setPull(DigitalPin.P13, PinPullMode.PullUp);
    // pins.setPull(DigitalPin.P14, PinPullMode.PullUp);
    // pins.setPull(DigitalPin.P15, PinPullMode.PullUp);
    // pins.setPull(DigitalPin.P16, PinPullMode.PullUp);
    init();
}

